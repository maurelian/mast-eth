/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ActionStateInterface extends ethers.utils.Interface {
  functions: {
    "lastAction()": FunctionFragment;
    "numActions()": FunctionFragment;
    "pendingAction()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lastAction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAction",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "lastAction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numActions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAction",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ActionState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ActionStateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lastAction(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        to: string;
        value: BigNumber;
        data: string;
        timestamp: BigNumber;
      }
    >;

    numActions(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingAction(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        to: string;
        value: BigNumber;
        data: string;
        timestamp: BigNumber;
      }
    >;
  };

  lastAction(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber] & {
      to: string;
      value: BigNumber;
      data: string;
      timestamp: BigNumber;
    }
  >;

  numActions(overrides?: CallOverrides): Promise<BigNumber>;

  pendingAction(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber] & {
      to: string;
      value: BigNumber;
      data: string;
      timestamp: BigNumber;
    }
  >;

  callStatic: {
    lastAction(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        to: string;
        value: BigNumber;
        data: string;
        timestamp: BigNumber;
      }
    >;

    numActions(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAction(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        to: string;
        value: BigNumber;
        data: string;
        timestamp: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    lastAction(overrides?: CallOverrides): Promise<BigNumber>;

    numActions(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAction(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    lastAction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numActions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAction(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
