/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BytesLike,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ScriptTree, ScriptTreeInterface } from "../ScriptTree";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_conditionsRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "scriptHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "ScriptSpent",
    type: "event",
  },
  {
    inputs: [],
    name: "conditionsRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_script",
        type: "bytes",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "spend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a0604052604051610b69380380610b6983398181016040528101906100259190610048565b806080818152505050610092565b6000815190506100428161007b565b92915050565b60006020828403121561005a57600080fd5b600061006884828501610033565b91505092915050565b6000819050919050565b61008481610071565b811461008f57600080fd5b50565b608051610ab66100b360003960008181608f01526101140152610ab66000f3fe60806040526004361061002d5760003560e01c8063511e140d14610039578063c3a702761461006457610034565b3661003457005b600080fd5b34801561004557600080fd5b5061004e61008d565b60405161005b91906107fd565b60405180910390f35b34801561007057600080fd5b5061008b600480360381019061008691906105ae565b6100b1565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b600084846040516100c39291906107cd565b60405180910390209050610139838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050507f0000000000000000000000000000000000000000000000000000000000000000836103e8565b610178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016f90610838565b60405180910390fd5b60006101c786868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506104c4565b90506000808273ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527fc0406226000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161027391906107e6565b600060405180830381855af49150503d80600081146102ae576040519150601f19603f3d011682016040523d82523d6000602084013e6102b3565b606091505b50915091506000818060200190518101906102ce919061067a565b90508280156102da5750805b610319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090610818565b60405180910390fd5b8c73ffffffffffffffffffffffffffffffffffffffff168c8c8c6040516103419291906107cd565b60006040518083038185875af1925050503d806000811461037e576040519150601f19603f3d011682016040523d82523d6000602084013e610383565b606091505b5050508c73ffffffffffffffffffffffffffffffffffffffff16857fdbc943c79a3d5098d686bd8ced8c088938fd3948d584fdbb6a38484d422e24e48e8e8e6040516103d193929190610858565b60405180910390a350505050505050505050505050565b60008082905060005b85518110156104b6576000868281518110610435577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508083116104765782816040516020016104599291906107a1565b6040516020818303038152906040528051906020012092506104a2565b80836040516020016104899291906107a1565b6040516020818303038152906040528051906020012092505b5080806104ae90610956565b9150506103f1565b508381149150509392505050565b6000808251602084016000f0905080915050919050565b6000813590506104ea81610a3b565b92915050565b60008083601f84011261050257600080fd5b8235905067ffffffffffffffff81111561051b57600080fd5b60208301915083602082028301111561053357600080fd5b9250929050565b60008151905061054981610a52565b92915050565b60008083601f84011261056157600080fd5b8235905067ffffffffffffffff81111561057a57600080fd5b60208301915083600182028301111561059257600080fd5b9250929050565b6000813590506105a881610a69565b92915050565b60008060008060008060008060a0898b0312156105ca57600080fd5b60006105d88b828c016104db565b98505060206105e98b828c01610599565b975050604089013567ffffffffffffffff81111561060657600080fd5b6106128b828c0161054f565b9650965050606089013567ffffffffffffffff81111561063157600080fd5b61063d8b828c0161054f565b9450945050608089013567ffffffffffffffff81111561065c57600080fd5b6106688b828c016104f0565b92509250509295985092959890939650565b60006020828403121561068c57600080fd5b600061069a8482850161053a565b91505092915050565b6106ac816108e0565b82525050565b6106c36106be826108e0565b61099f565b82525050565b60006106d58385610895565b93506106e2838584610914565b6106eb836109d8565b840190509392505050565b600061070283856108a6565b935061070f838584610914565b82840190509392505050565b60006107268261088a565b61073081856108a6565b9350610740818560208601610923565b80840191505092915050565b6000610759600d836108b1565b9150610764826109e9565b602082019050919050565b600061077c600e836108b1565b915061078782610a12565b602082019050919050565b61079b8161090a565b82525050565b60006107ad82856106b2565b6020820191506107bd82846106b2565b6020820191508190509392505050565b60006107da8284866106f6565b91508190509392505050565b60006107f2828461071b565b915081905092915050565b600060208201905061081260008301846106a3565b92915050565b600060208201905081810360008301526108318161074c565b9050919050565b600060208201905081810360008301526108518161076f565b9050919050565b600060408201905061086d6000830186610792565b81810360208301526108808184866106c9565b9050949350505050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006108cd826108ea565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610941578082015181840152602081019050610926565b83811115610950576000848401525b50505050565b60006109618261090a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610994576109936109a9565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f536372697074206661696c656400000000000000000000000000000000000000600082015250565b7f496e76616c69642070726f6f662e000000000000000000000000000000000000600082015250565b610a44816108c2565b8114610a4f57600080fd5b50565b610a5b816108d4565b8114610a6657600080fd5b50565b610a728161090a565b8114610a7d57600080fd5b5056fea26469706673582212200b4e2b0216581c13fd71172cfc729a8188e7c0d4567cf57a5abf589ea259e54a64736f6c63430008040033";

type ScriptTreeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ScriptTreeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ScriptTree__factory extends ContractFactory {
  constructor(...args: ScriptTreeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _conditionsRoot: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ScriptTree> {
    return super.deploy(
      _conditionsRoot,
      overrides || {}
    ) as Promise<ScriptTree>;
  }
  getDeployTransaction(
    _conditionsRoot: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_conditionsRoot, overrides || {});
  }
  attach(address: string): ScriptTree {
    return super.attach(address) as ScriptTree;
  }
  connect(signer: Signer): ScriptTree__factory {
    return super.connect(signer) as ScriptTree__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ScriptTreeInterface {
    return new utils.Interface(_abi) as ScriptTreeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ScriptTree {
    return new Contract(address, _abi, signerOrProvider) as ScriptTree;
  }
}
