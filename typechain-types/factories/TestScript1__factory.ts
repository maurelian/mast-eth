/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestScript1, TestScript1Interface } from "../TestScript1";

const _abi = [
  {
    inputs: [],
    name: "run",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060b88061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063c040622614602d575b600080fd5b60336047565b604051603e9190605d565b60405180910390f35b60006001905090565b6057816076565b82525050565b6000602082019050607060008301846050565b92915050565b6000811515905091905056fea2646970667358221220330d4e741264f7657e79ddfc35e5bc0890e37a1dee81a49899a6e3e4f3d005e064736f6c63430008040033";

type TestScript1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestScript1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestScript1__factory extends ContractFactory {
  constructor(...args: TestScript1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestScript1> {
    return super.deploy(overrides || {}) as Promise<TestScript1>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestScript1 {
    return super.attach(address) as TestScript1;
  }
  connect(signer: Signer): TestScript1__factory {
    return super.connect(signer) as TestScript1__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestScript1Interface {
    return new utils.Interface(_abi) as TestScript1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestScript1 {
    return new Contract(address, _abi, signerOrProvider) as TestScript1;
  }
}
